@page "/add-employee"
@using Bigjohnspizzadonairs.Data
@inject NavigationManager nav
@inject DbmaManager dbManager

<div class="container mx-auto p-6">
    <div class="top-0 left-0 mt-2 mb-2 ">
        <button @onclick="HandleBackup" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg flex items-center transition duration-300 ease-in-out">
            <img src="./left-arrow.png" class="h-6 mr-2" />
            Backup
        </button>
    </div>
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <div class="mb-6">
            <h1 class="text-xl font-bold text-gray-900">Add New Employee</h1>
        </div>
        <form>
            <div class="flex flex-wrap -mx-3 mb-6 ">
                <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="name" >
                        Name
                    </label>
                    <input @bind="newEmployee.Name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="name" type="text" placeholder="Name">
                </div>
                <div class="w-full md:w-1/2 px-3">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="email">
                        Email
                    </label>
                    <input @bind="newEmployee.Email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="email" type="email" placeholder="Email">
                </div>
            </div>

            <div class="flex flex-wrap -mx-3 mb-6">
                <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="age">
                        Age
                    </label>
                    <input @bind="newEmployee.Age" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="age" type="number" placeholder="Age">
                </div>
                <div class="w-full md:w-1/2 px-3">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="position">
                        Position
                    </label>
                    <select @bind="newEmployee.Position" class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="position">
                        <option value="">Select Position</option>
                        <option value="Manager">Manager</option>
                        <option value="Employee">Employee</option>
                    </select>
                </div>
            </div>

            <div class="flex flex-wrap -mx-3 mb-6">
                <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="Contact">
                        Contact Number
                    </label>
                    <input @bind="newEmployee.ContactNumber" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="contact" type="text" placeholder="Contact No.">
                </div>
                <div class="w-full md:w-1/2 px-3">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="Emergency_contact">
                        Emergency Contact Number
                    </label>
                    <input @bind="newEmployee.EmergencyContactNumber"  class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="Em-contact" type="text" placeholder="Emergency Contact Number">
                </div>
            </div>
            <div class="flex flex-wrap -mx-3 mb-6">
                <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="Password">
                         Password
                    </label>
                    <input @bind="newEmployee.Password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="contact" input type="password" placeholder="Set Password" @oninput="password">
                </div>
                <div class="w-full md:w-1/2 px-3">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="Confirm Password">
                        Confirm Password
                    </label>
                    <input @bind="confirmPassword"  class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="Password" type="password" placeholder="Confirm Password" @oninput="password">
                </div>
            </div>
            <div class="flex items-center justify-center">
                <button @onclick="EmployeeAdd" class="bg-[#8C8C73] hover:bg-green-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                    Add Employee
                </button>
            </div>
        </form>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-red-500 text-xs italic">@errorMessage</p>
    }
</div>
@code{
    private EmployeeModel newEmployee = new EmployeeModel();
    private string confirmPassword;
    private string errorMessage;
    string pass = "";

    private void password(ChangeEventArgs e)
    {
        pass = e.Value.ToString();
    }
    private async Task EmployeeAdd()
    {
        if (string.IsNullOrEmpty(newEmployee.Name) || string.IsNullOrEmpty(newEmployee.Email) ||
            string.IsNullOrEmpty(newEmployee.Position) || string.IsNullOrEmpty(newEmployee.ContactNumber) ||
            string.IsNullOrEmpty(newEmployee.EmergencyContactNumber) || newEmployee.Age <= 0)
        {
            errorMessage = "All fields are required.";
            return;
        }

        if (newEmployee.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        bool result = await dbManager.AddEmployeeAsync(newEmployee);
        if (result)
        {
            // Handle successful employee addition, e.g., navigate to the employee list or clear the form.
            errorMessage = "Employee added successfully!";
           // newEmployee = new EmployeeModel(); // Reset the form
            confirmPassword = string.Empty;
        }
        else
        {
            errorMessage = "There was an error adding the employee. Please try again.";
        }
    }
    private void HandleBackup()
    {
        nav.NavigateTo("/employee-management");
    }
}
}