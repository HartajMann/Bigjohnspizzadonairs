@page "/shifts-summary"
@inject NavigationManager nav
@inject DbmaManager dbManager
@using Bigjohnspizzadonairs.Data
@using System.Diagnostics;
@using ClosedXML.Excel;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Threading.Tasks;

@using System.Windows.Forms;
@inject IFileSaveService FileSaveService1

<div class="container mx-auto p-6">

<h1 class="text-3xl font-semibold text-gray-800 mb-4">Employee Shifts Summary</h1>

<div class="mb-6">
    <label for="monthSelector" class="block text-sm font-medium text-gray-700">Select Month:</label>
        <input type="month" id="monthSelector" value="@SelectedMonthAsString" @onchange="OnMonthSelected" class="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm">
    </div>

@if (shiftSummaries != null)
{
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee ID</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee Name</th>

                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hours Worked</th>

                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var summary in shiftSummaries)
                {
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap">@summary.UserId</td>
                            <td class="px-6 py-4 whitespace-nowrap">@summary.Name</td>

                        <td class="px-6 py-4 whitespace-nowrap">@Math.Round(summary.TotalMinutesWorked / 60.0, 2)</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <button @onclick="() => GoToShiftDetails(summary.UserId)" class="bg-[#8C8C73] hover:bg-green-600 text-white font-bold py-2 rounded-md w-full transition duration-200">
                                    View 
                                </button>
                            </td>
                    </tr>
                }
            </tbody>
        </table>
            <div class="flex justify-center mt-4">
                <button @onclick="ExportToExcel" class="bg-[#8C8C73] hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md transition duration-200">
                    Export to Excel
                </button>
            </div>

    </div>
}

else
{
    <p>Select a month to view the shifts summary.</p>
}
</div>
@code {
    private DateTime? selectedMonth;
    private List<EmployeeShiftSummary> shiftSummaries;
    private string SelectedMonthAsString
    {
        get => selectedMonth?.ToString("yyyy-MM");
        set
        {
            if (DateTime.TryParseExact(value, "yyyy-MM", null, System.Globalization.DateTimeStyles.None, out var date))
            {
                selectedMonth = date;
                LoadShiftSummaries(); // Call your loading method here
            }
        }
    }

    private Task OnMonthSelected(ChangeEventArgs e)
    {
        SelectedMonthAsString = e.Value?.ToString();
        return Task.CompletedTask;
    }
    private async Task LoadShiftSummaries()
    {
        if (selectedMonth.HasValue)
        {
            shiftSummaries = await dbManager.GetShiftSummariesByMonthAsync(selectedMonth.Value.Year, selectedMonth.Value.Month);
            StateHasChanged();
        }
    }
    private void GoToShiftDetails(string userId)
    {
        nav.NavigateTo($"/shift-details/{userId}");
    }
    private async Task ExportToExcel()
    {
        var shiftSummaries = await dbManager.GetShiftSummariesByMonthAsync(selectedMonth.Value.Year, selectedMonth.Value.Month);

        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Shifts Summary");
            worksheet.Cell(1, 1).Value = "Employee ID";
            worksheet.Cell(1, 2).Value = "Employee Name";
            worksheet.Cell(1, 3).Value = "Hours Worked";

            int row = 2;
            foreach (var summary in shiftSummaries)
            {
                worksheet.Cell(row, 1).Value = summary.UserId;
                worksheet.Cell(row, 2).Value = summary.Name;
                worksheet.Cell(row, 3).Value = Math.Round(summary.TotalMinutesWorked / 60.0, 2);
                row++;
            }

            worksheet.Columns().AdjustToContents();

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();
                var fileName = await FileSaveService1.SaveFileAsync(content, "ShiftsSummary.xlsx", "Excel files (*.xlsx)|*.xlsx");

                if (!string.IsNullOrEmpty(fileName))
                {
                    // Notify the user or handle the saved file path as needed
                    Console.WriteLine($"File saved to {fileName}");
                }
            }
        }
    }
    public class FileSaveService : IFileSaveService
    {
        public async Task<string> SaveFileAsync(byte[] fileContents, string defaultFileName, string fileTypeFilter)
        {
            using var saveFileDialog = new SaveFileDialog
                {
                    FileName = defaultFileName,
                    Filter = fileTypeFilter
                };

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                await File.WriteAllBytesAsync(saveFileDialog.FileName, fileContents);
                return saveFileDialog.FileName;
            }

            return null;
        }
    }
}
