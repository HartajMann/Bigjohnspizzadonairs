@page "/inventory-list"
@using Bigjohnspizzadonairs.Data
@inject NavigationManager nav
@inject DbmaManager dbManager
@using ClosedXML.Excel;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Threading.Tasks;

@using System.Windows.Forms;
@inject IFileSaveService FileSaveService1

<div class="container mx-auto p-6 overflow-hidden">
    <div class="overflow-y-auto">
    <div class="mb-4">
        <h1 class="text-2xl font-bold text-gray-900">List of Inventories</h1>
    </div>
    <div class="bg-white shadow-md rounded my-6">
            <table class="text-left w-full   border-collapse">
                <thead class="bg-[#8C8C73]">
                <tr>
                    <th class="py-4 px-6 bg-grey-lightest font-bold uppercase text-sm text-grey-dark border-b border-grey-light">Inventory Code</th>
                    <th class="py-4 px-6 bg-grey-lightest font-bold uppercase text-sm text-grey-dark border-b border-grey-light">Inventory Name</th>
                    <th class="py-4 px-6 bg-grey-lightest font-bold uppercase text-sm text-grey-dark border-b border-grey-light">Quantity</th>
                    <th class="py-4 px-6 bg-grey-lightest font-bold uppercase text-sm text-grey-dark border-b border-grey-light">Inventory Branch Name</th>
                    <th class="py-4 px-6 bg-grey-lightest font-bold uppercase text-sm text-grey-dark border-b border-grey-light">Expiry Date</th>
                    <th class="py-4 px-6 bg-grey-lightest font-bold uppercase text-sm text-grey-dark border-b border-grey-light">Action</th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var item in inventoryItems)
                {
                    <tr class="hover:bg-grey-lighter">
                            <td class="py-4 px-6 border-b border-grey-light">@item.InventoryId</td>
                            <td class="py-4 px-6 border-b border-grey-light">@item.Name</td>
                            <td class="py-4 px-6 border-b border-grey-light">@item.Quantity</td>
                            <td class="py-4 px-6 border-b border-grey-light">@item.Branch</td>
                            <td class="py-4 px-6 border-b border-grey-light">@item.ExpiryDate?.ToString("dd-MM-yyyy")</td>
                            <td class="py-4 px-6 border-b border-grey-light">
                                <button class="text-blue-600 hover:underline mr-2" @onclick="() => NavigateToEditItem(item.InventoryId)">Edit</button>
                                <button @onclick="() => DeleteItem(item.InventoryId)" class="text-red-600 hover:underline">Delete</button>
                            </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
        <div class="flex justify-center mt-4">
            <button @onclick="ExportToExcel" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                Export to Excel
            </button>
        </div>

    </div>
</div>
@code {
    private List<InventoryItemModel> inventoryItems = new List<InventoryItemModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryItems();
    }
    private async Task LoadInventoryItems()
    {
        inventoryItems = await dbManager.GetInventoryItemsAsync();
    }
    private async Task DeleteItem(int inventoryId)
    {
        var result = await dbManager.DeleteInventoryItemAsync(inventoryId);
        if (result)
        {
            // Item was deleted successfully, reload the list to reflect the change
            await LoadInventoryItems();
        }
        else
        {
            // Handle the error, could not delete the item
        }
    }
    private async Task NavigateToEditItem(int inventoryId)
	{
		nav.NavigateTo($"/edit-inventory/{inventoryId}");
	}
    private async Task ExportToExcel()
    {
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Inventory List");
            worksheet.Cell(1, 1).Value = "Inventory Code";
            worksheet.Cell(1, 2).Value = "Inventory Name";
            worksheet.Cell(1, 3).Value = "Quantity";
            worksheet.Cell(1, 4).Value = "Inventory Branch Name";
            worksheet.Cell(1, 5).Value = "Expiry Date";
            worksheet.Cell(1, 6).Value = "Description";

            int currentRow = 2;
            foreach (var item in inventoryItems)
            {
                worksheet.Cell(currentRow, 1).Value = item.InventoryId;
                worksheet.Cell(currentRow, 2).Value = item.Name;
                worksheet.Cell(currentRow, 3).Value = item.Quantity;
                worksheet.Cell(currentRow, 4).Value = item.Branch;
                worksheet.Cell(currentRow, 5).Value = item.ExpiryDate;
                worksheet.Cell(currentRow, 6).Value = item.Description;
                currentRow++;
            }

            worksheet.Columns().AdjustToContents();

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();
                var fileName = await FileSaveService1.SaveFileAsync(content, "InventoryList.xlsx", "Excel files (*.xlsx)|*.xlsx");

                if (!string.IsNullOrEmpty(fileName))
                {
                    // Notify the user or handle the saved file path as needed
                }
            }
        }
    }
    public class FileSaveService : IFileSaveService
    {
        public async Task<string> SaveFileAsync(byte[] fileContents, string defaultFileName, string fileTypeFilter)
        {
            using var saveFileDialog = new SaveFileDialog
                {
                    FileName = defaultFileName,
                    Filter = fileTypeFilter
                };

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                await File.WriteAllBytesAsync(saveFileDialog.FileName, fileContents);
                return saveFileDialog.FileName;
            }

            return null;
        }
    }
}