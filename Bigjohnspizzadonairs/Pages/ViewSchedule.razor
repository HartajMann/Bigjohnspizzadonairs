@page "/daily-schedule"
@using Bigjohnspizzadonairs.Data
@inject DbmaManager dbManager
@using System.Diagnostics;

<div class="container mx-auto p-6">

    <div class="bg-white shadow rounded-lg p-6">
        <div class="mb-4">
            <h1 class="text-2xl font-semibold text-gray-800">Daily Employee Schedules</h1>
            <div class="mt-4">
                <label for="schedule-date" class="block text-sm font-medium text-gray-700">Select Date:</label>
                <input type="date" id="schedule-date" @onchange="LoadSchedulesForDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            </div>
        </div>

        <div class="mt-4">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Time</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Time</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var schedule in dailySchedules)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap">@schedule.EmployeeName</td>
                            <td class="px-6 py-4 whitespace-nowrap">@schedule.StartTime.ToString(@"hh\:mm")</td>
                            <td class="px-6 py-4 whitespace-nowrap">@schedule.EndTime.ToString(@"hh\:mm")</td>

                            <td class="px-6 py-4 whitespace-nowrap">
                                <button class="text-indigo-600 hover:text-indigo-900" @onclick="() => EditSchedule(schedule)">Edit</button>
                                <button class="text-red-600 hover:text-red-900 ml-4" @onclick="() => DeleteSchedule(schedule.ScheduleId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    @if (isEditModalOpen)
    {
        <div class="fixed z-10 inset-0 overflow-y-auto">
            <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <!-- Modal overlay -->
                <div class="fixed inset-0 transition-opacity" @onclick="CloseModal">
                    <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
                </div>

                <!-- Modal content -->
                <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full" role="dialog" aria-modal="true" aria-labelledby="modal-headline">
                    <div class="bg-white px-6 py-5 sm:p-6">
                        <div class="sm:flex sm:items-start">
                            <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-headline">Edit Schedule for @editingEmployeeName</h3>
                                <div class="mt-2">
                                    <p class="text-sm text-gray-500 py-3">Select new start and end times:</p>
                                    <input type="time" class="border-gray-300 rounded-md" value="@editingStartTime.ToString(@"hh\:mm")" @onchange="UpdateEditingStartTime">
                                    <input type="time" class="border-gray-300 rounded-md" value="@editingEndTime.ToString(@"hh\:mm")" @onchange="UpdateEditingEndTime">

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row ">
                        <button type="button" class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-[#8C8C73] hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#8C8C73]" @onclick="UpdateSchedule">Save</button>
                        <button type="button"  class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-black bg-white" @onclick="CloseModal">Cancel</button>
                    </div>

                </div>
            </div>
        </div>
    }
</div>

@code {
    private DateTime? selectedDate;
    private List<ScheduleDisplayModel> dailySchedules = new();

    private bool isEditModalOpen = false;
    private int editingScheduleId;
    private string editingEmployeeName = "";
    private TimeSpan editingStartTime;
    private TimeSpan editingEndTime;
    private async Task LoadSchedulesForDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            selectedDate = date;
            dailySchedules = await dbManager.GetSchedulesForDate(selectedDate.Value);
            StateHasChanged();
        }
    }


    private async Task DeleteSchedule(int scheduleId)
    {
        bool success = await dbManager.DeleteScheduleAsync(scheduleId);
        if (success)
        {
            dailySchedules = await dbManager.GetSchedulesForDate(selectedDate.Value);
            StateHasChanged();
        }
    }

    private void EditSchedule(ScheduleDisplayModel schedule)
    {
        editingScheduleId = schedule.ScheduleId;
        editingEmployeeName = schedule.EmployeeName;
        editingStartTime = schedule.StartTime;
        editingEndTime = schedule.EndTime;
        isEditModalOpen = true;
    }

    private void CloseModal()
    {
        isEditModalOpen = false;
    }
    private void UpdateEditingStartTime(ChangeEventArgs e)
    {
        if (TimeSpan.TryParse(e.Value?.ToString(), out var startTime))
        {
            editingStartTime = startTime;
        }
    }

    private void UpdateEditingEndTime(ChangeEventArgs e)
    {
        if (TimeSpan.TryParse(e.Value?.ToString(), out var endTime))
        {
            editingEndTime = endTime;
        }
    }

    private async Task UpdateSchedule()
    {
        bool success = await dbManager.UpdateScheduleAsync(editingScheduleId, editingStartTime, editingEndTime);
        if (success)
        {
            CloseModal();
            dailySchedules = await dbManager.GetSchedulesForDate(selectedDate.Value);
            StateHasChanged();
        }
    }
}